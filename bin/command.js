// Generated by CoffeeScript 1.9.2
var ShulzMapBusy, args, cmds, command, commands, err, shulz, usage, usage_error;

usage = "Usage: shulz command [key] [value] file\n\nView:\n  cat                     Print entire map contents\n  print                   Print full operations\n  get key                 Print the value for key\n\nManipulate:\n  set key value           Set key to value\n  clear key               Remove key from the hashmap\n  purge                   Remove all entries from the hashmap\n  compact                 Remove expired hashmap contents\n\nOptions:\n  -h                      Display this usage information\n  -v                      Display the version number\n";

process.on('uncaughtException', function(err) {
  console.error('Caught exception: ');
  console.error(err.stack);
  return process.exit(1);
});

usage_error = (function(_this) {
  return function(message) {
    console.error();
    console.error("  " + message);
    console.error();
    console.error(usage);
    return process.exit(1);
  };
})(this);

args = process.argv.slice(2);

if (args.length === 0) {
  return console.error(usage);
}

shulz = require('../');

ShulzMapBusy = require('../src/errors').ShulzMapBusy;

commands = {
  cat: function(path) {
    var key, object, results, value;
    object = shulz.read(path);
    results = [];
    for (key in object) {
      value = object[key];
      results.push(console.log(key + " => " + (JSON.stringify(value))));
    }
    return results;
  },
  print: function(path) {
    return shulz.print(path);
  },
  purge: function(path) {
    var map;
    map = shulz.create(path);
    return map.close();
  },
  compact: function(path) {
    var map;
    map = shulz.open(path);
    map.compact();
    return map.close();
  },
  get: function(key, path) {
    var map;
    map = shulz.open(path);
    console.log(JSON.stringify(map.get(key)));
    return map.close();
  },
  set: function(key, value, path) {
    var map;
    map = shulz.open(path);
    console.log(map.set(key, JSON.parse(value)));
    return map.close();
  },
  clear: function(key, path) {
    var map;
    map = shulz.open(path);
    map.clear(key);
    return map.close();
  }
};

cmds = {
  cat: function() {
    if (args.length === 1) {
      return commands.cat(args[0]);
    }
    return usage_error('shulz cat requires one argument - the map path');
  },
  print: function() {
    if (args.length === 1) {
      return commands.print(args[0]);
    }
    return usage_error('shulz print requires one argument - the map path');
  },
  get: function() {
    if (args.length === 2) {
      return commands.get(args[0], args[1]);
    }
    return usage_error('shulz get requires two arguments - the key to retrieve and the map path');
  },
  set: function() {
    if (args.length === 3) {
      return commands.set(args[0], args[1], args[2]);
    }
    return usage_error('shulz set requires three arguments - the key to set, the value to set it to and the map path');
  },
  clear: function() {
    if (args.length === 2) {
      return commands.clear(args[0], args[1]);
    }
    return usage_error('shulz clear requires two arguments - the key to clear and the map path');
  },
  purge: function() {
    if (args.length === 1) {
      return commands.purge(args[0]);
    }
    return usage_error('shulz purge requires one argument - the map path');
  },
  compact: function() {
    if (args.length === 1) {
      return commands.compact(args[0]);
    }
    return usage_error('shulz compact requires one argument - the map path');
  },
  '-h': function() {
    return console.log(usage);
  },
  '-v': function() {
    var pjson;
    pjson = require('../package.json');
    return console.log(pjson.version);
  }
};

command = args[0];

args.shift();

try {
  if (cmds[command] != null) {
    return cmds[command]();
  }
} catch (_error) {
  err = _error;
  if (err instanceof ShulzMapBusy) {
    console.error(err.message);
    console.error();
  } else {
    console.error('Caught exception: ');
    console.error(err.stack);
  }
  process.exit(1);
}

usage_error(command + " is not a known shulz command");
